(function () {
  return data =
  "# 加油站\n" +
  "\n" +
  "> 测试引用块 [TOC]\n" +
  "\n"+
  "- [x] Markdown 美化\n"+
  "\n"+
  "[链接-我的个人主页](https://www.evgo2017.com)\n"+
  "\n" +
  "## 题目\n" +
  "\n" +
  "一辆汽车加满油后可行驶 n 公里。\n" +
  "\n" +
  "旅途中有若干个加油站。\n" +
  "\n" +
  "设计一个有效算法，指出应在哪些加油站停靠加油，使沿途加油次数最少。\n" +
  "\n" +
  "对于给定的 n 和 k 个加油站位置，计算最少加油次数。\n" +
  "\n" +
  "### 输入\n" +
  "\n" +
  "输入数据的第一行有 2 个正整数 n 和 k（n≤4000， k≤1000），表示汽车加满油后可行驶 n 公里，且旅途中有 k 个加油站。\n" +
  "\n" +
  "接下来的 1 行中，有 k+1 个整数，表示第 k 个加油站与第 k-1 个加油站之间的距离。\n" +
  "\n" +
  "第 0 个加油站表示示出发地，汽车已加满油。第 k+1 个加油站表示目的地。\n" +
  "\n" +
  "### 输出\n" +
  "\n" +
  "将计算出的最少加油次数输出。如果无法到达目的地， 则输出” No Solution!” 。\n" +
  "\n" +
  "## 分析\n" +
  "\n" +
  "### 输入\n" +
  "\n" +
  "有三部分值，n 为车辆最大加油量（出发时油量为满），ｋ 为出发地和目的地之间的加油站数量，设一个一维数组 data[k+1]，其中存放：出发地和第一个加油站，各加油站之间，最后一个加油站和目的地的距离。\n" +
  "\n" +
  "假设输入数据为：\n" +
  "\n" +
  "```\n" +
  "5 3\n" +
  "3 6 4 3\n" +
  "```\n" +
  "\n" +
  "则 data 数组含义如图：\n" +
  "\n" +
  "```\n" +
  "距离：\t  3\t\t\t      6\t\t\t\t   4\t\t\t\t 3\n" +
  "出发地-------第一个加油站-------第二个加油站-------第三个加油站-------目的地\n" +
  "```\n" +
  "\n" +
  "\n" +
  "\n" +
  "### 还未开始就结束\n" +
  "\n" +
  "可以看出，如果data数组内某一值>n值，就可以直接输出” No Solution!”了，因为这两地之间的距离比加满油能行驶的距离都远。\n" +
  "\n" +
  "```c++\n" +
  "for(int i=0; i<k+1; i++) {\n" +
  "\tfin>>data[i];\n" +
  "\tif(data[i]>n) {\n" +
  "\t\tcout<<\"No Solution!\"<<endl; //如果某一站路之间的距离比加满油还远，自然无法到达\n" +
  "\t\treturn 0;\n" +
  "    }\n" +
  "}\n" +
  "```\n" +
  "\n" +
  "\n" +
  "\n" +
  "### 关键点\n" +
  "\n" +
  "输入以下数据继续分析：\n" +
  "\n" +
  "```\n" +
  "5 3\n" +
  "3 1 4 3\n" +
  "```\n" +
  "\n" +
  "采用贪心算法，假设每次出发时，先判断此时油量能否顺利抵达下一地点，如果可以，就不用加油，否则加油并且加油次数+1。\n" +
  "\n" +
  "```c++\n" +
  "int num = 0; //加油次数\n" +
  "for(int i=0; i<k+1; i++) {\n" +
  "\tif(n>data[i]) {  //如果油量比此段距离大，就直接减去\n" +
  "\t\tn -= data[i];\n" +
  "\t} else { //如果油量不比此段距离大，则加满油，再减去此段距离，加油次数+1\n" +
  "\t\tn = 5 - data[i];\n" +
  "\t\tnum++;\n" +
  "\t}\n" +
  "}\n" +
  "```\n" +
  "\n" +
  "列表表示，其中油量为”到达此地时的油量“，加油次为”从此地出发时的加油次数“：\n" +
  "\n" +
  "| 地点   | 出发地  | 第一个加油站 | 第二个加油站 | 第三加油站 | 目的地  |\n" +
  "| ---- | ---- | ------ | ------ | ----- | ---- |\n" +
  "| 油量   | 5    | 2      | 1      | 1     | 2    |\n" +
  "| 加油次  | 0    | 0      | 1      | 2     | 2    |\n" +
  "\n" +
  "\n" +
  "\n" +
  "## 代码(注释版请查看main_note.cpp源文件)\n" +
  "\n" +
  "注：main.cpp文件仅包含运行代码，如需每一步代码的详细解释，请查看main_note.cpp文件。\n" +
  "\n" +
  "```c++\n" +
  "/*\n" +
  " * @Author: evgo \n" +
  " * @Date: 2018-06-10 21:32:29 \n" +
  " * @Last Modified by: evgo\n" +
  " * @Last Modified time: 2018-06-10 22:41:31\n" +
  " * @Email: evgo2017@qq.com \n" +
  " * @Github: evgo2017\n" +
  " * @Blog: https://evgo2017.com\n" +
  " */"+
  "\n" +
  "/* 加油站 */\n" +
  "\n" +
  "#include <iostream>\n" +
  "#include <fstream>\n" +
  "using namespace std;\n" +
  "\n" +
  "//采用贪心算法\n" +
  "int main(){\n" +
  "    ifstream fin(\"input.txt\");\n" +
  "    int n,k，num = 0; \n" +
  "    fin>>n; \n" +
  "    fin>>k; \n" +
  "\n" +
  "    int data[k+1] = {0};\n" +
  "    for(int i=0; i<k+1; i++) {\n" +
  "        fin>>data[i];\n" +
  "        if(data[i]>n) {\n" +
  "            cout<<\"No Solution!\"<<endl; \n" +
  "            return 0;\n" +
  "        }\n" +
  "    }\n" +
  "    \n" +
  "    for(int i=0; i<k+1; i++) {\n" +
  "        if(n>data[i]) {  \n" +
  "            n -= data[i];\n" +
  "        } else { \n" +
  "            n = 5 - data[i];\n" +
  "            num++;\n" +
  "        }\n" +
  "    }\n" +
  "    \n" +
  "    cout<<num<<endl;\n" +
  "    return 0;\n" +
  "}\n" +
  "```\n" +
  "\n" +
  "\n" +
  "\n"+
  "# 一、一级标题\n" +
  "## 1. 二级标题\n" +
  "测试 highlight：\n" +
  "```javascript\n" +
  "// ES6 结构赋值\n" +
  "let { name, type } = node //\"nodeName\", \"Object\"\n" +
  "```\n" +
  "## 2. 二级标题\n" +
  "### （1）三级标题\n" +
  "测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字\n"+
  "### （2）三级标题\n" +
  "测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字\n"+
  "## 3. 二级标题\n" +
  "测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字\n"+
  "# 一级标题\n" +
  "下面这个链接对应上面相同的标题，测试能否生成不同锚点：\n" +
  "### 三级标题\n" +
  "测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字\n"+
  "##### 五级标题~\n"+
  "测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字\n"+
  "## 二级标题~\n"+
  "测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字测试文字\n"
  +"# 加油站\n" +
  "\n" +
  "> 测试引用块 [TOC]\n" +
  "\n"+
  "- [x] Markdown 美化\n"+
  "\n"+
  "[链接-我的个人主页](https://www.evgo2017.com)\n"+
  "\n" +
  "## 题目\n" +
  "\n" +
  "一辆汽车加满油后可行驶 n 公里。\n" +
  "\n" +
  "旅途中有若干个加油站。\n" +
  "\n" +
  "设计一个有效算法，指出应在哪些加油站停靠加油，使沿途加油次数最少。\n" +
  "\n" +
  "对于给定的 n 和 k 个加油站位置，计算最少加油次数。\n" +
  "\n" +
  "### 输入\n" +
  "\n" +
  "输入数据的第一行有 2 个正整数 n 和 k（n≤4000， k≤1000），表示汽车加满油后可行驶 n 公里，且旅途中有 k 个加油站。\n" +
  "\n" +
  "接下来的 1 行中，有 k+1 个整数，表示第 k 个加油站与第 k-1 个加油站之间的距离。\n" +
  "\n" +
  "第 0 个加油站表示示出发地，汽车已加满油。第 k+1 个加油站表示目的地。\n" +
  "\n" +
  "### 输出\n" +
  "\n" +
  "将计算出的最少加油次数输出。如果无法到达目的地， 则输出” No Solution!” 。\n" +
  "\n" +
  "## 分析\n" +
  "\n" +
  "### 输入\n" +
  "\n" +
  "有三部分值，n 为车辆最大加油量（出发时油量为满），ｋ 为出发地和目的地之间的加油站数量，设一个一维数组 data[k+1]，其中存放：出发地和第一个加油站，各加油站之间，最后一个加油站和目的地的距离。\n" +
  "\n" +
  "假设输入数据为：\n" +
  "\n" +
  "```\n" +
  "5 3\n" +
  "3 6 4 3\n" +
  "```\n" +
  "\n" +
  "则 data 数组含义如图：\n" +
  "\n" +
  "```\n" +
  "距离：\t  3\t\t\t      6\t\t\t\t   4\t\t\t\t 3\n" +
  "出发地-------第一个加油站-------第二个加油站-------第三个加油站-------目的地\n" +
  "```\n" +
  "\n" +
  "\n" +
  "\n" +
  "### 还未开始就结束\n" +
  "\n" +
  "可以看出，如果data数组内某一值>n值，就可以直接输出” No Solution!”了，因为这两地之间的距离比加满油能行驶的距离都远。\n" +
  "\n" +
  "```c++\n" +
  "for(int i=0; i<k+1; i++) {\n" +
  "\tfin>>data[i];\n" +
  "\tif(data[i]>n) {\n" +
  "\t\tcout<<\"No Solution!\"<<endl; //如果某一站路之间的距离比加满油还远，自然无法到达\n" +
  "\t\treturn 0;\n" +
  "    }\n" +
  "}\n" +
  "```\n" +
  "\n" +
  "\n" +
  "\n" +
  "### 关键点\n" +
  "\n" +
  "输入以下数据继续分析：\n" +
  "\n" +
  "```\n" +
  "5 3\n" +
  "3 1 4 3\n" +
  "```\n" +
  "\n" +
  "采用贪心算法，假设每次出发时，先判断此时油量能否顺利抵达下一地点，如果可以，就不用加油，否则加油并且加油次数+1。\n" +
  "\n" +
  "```c++\n" +
  "int num = 0; //加油次数\n" +
  "for(int i=0; i<k+1; i++) {\n" +
  "\tif(n>data[i]) {  //如果油量比此段距离大，就直接减去\n" +
  "\t\tn -= data[i];\n" +
  "\t} else { //如果油量不比此段距离大，则加满油，再减去此段距离，加油次数+1\n" +
  "\t\tn = 5 - data[i];\n" +
  "\t\tnum++;\n" +
  "\t}\n" +
  "}\n" +
  "```\n" +
  "\n" +
  "列表表示，其中油量为”到达此地时的油量“，加油次为”从此地出发时的加油次数“：\n" +
  "\n" +
  "| 地点   | 出发地  | 第一个加油站 | 第二个加油站 | 第三加油站 | 目的地  |\n" +
  "| ---- | ---- | ------ | ------ | ----- | ---- |\n" +
  "| 油量   | 5    | 2      | 1      | 1     | 2    |\n" +
  "| 加油次  | 0    | 0      | 1      | 2     | 2    |\n" +
  "\n" +
  "\n" +
  "\n" +
  "## 代码(注释版请查看main_note.cpp源文件)\n" +
  "\n" +
  "注：main.cpp文件仅包含运行代码，如需每一步代码的详细解释，请查看main_note.cpp文件。\n" +
  "\n" +
  "```c++\n" +
  "/*\n" +
  " * @Author: evgo \n" +
  " * @Date: 2018-06-10 21:32:29 \n" +
  " * @Last Modified by: evgo\n" +
  " * @Last Modified time: 2018-06-10 22:41:31\n" +
  " * @Email: evgo2017@qq.com \n" +
  " * @Github: evgo2017\n" +
  " * @Blog: https://evgo2017.com\n" +
  " */"+
  "\n" +
  "/* 加油站 */\n" +
  "\n" +
  "#include <iostream>\n" +
  "#include <fstream>\n" +
  "using namespace std;\n" +
  "\n" +
  "//采用贪心算法\n" +
  "int main(){\n" +
  "    ifstream fin(\"input.txt\");\n" +
  "    int n,k，num = 0; \n" +
  "    fin>>n; \n" +
  "    fin>>k; \n" +
  "\n" +
  "    int data[k+1] = {0};\n" +
  "    for(int i=0; i<k+1; i++) {\n" +
  "        fin>>data[i];\n" +
  "        if(data[i]>n) {\n" +
  "            cout<<\"No Solution!\"<<endl; \n" +
  "            return 0;\n" +
  "        }\n" +
  "    }\n" +
  "    \n" +
  "    for(int i=0; i<k+1; i++) {\n" +
  "        if(n>data[i]) {  \n" +
  "            n -= data[i];\n" +
  "        } else { \n" +
  "            n = 5 - data[i];\n" +
  "            num++;\n" +
  "        }\n" +
  "    }\n" +
  "    \n" +
  "    cout<<num<<endl;\n" +
  "    return 0;\n" +
  "}\n" +
  "```\n" +
  "\n" +
  "\n" +
  "\n"+
  "# 一、一级标题\n" +
  "## 1. 二级标题\n" +
  "测试 highlight：\n" +
  "```javascript\n" +
  "// ES6 结构赋值\n" +
  "let { name, type } = node //\"nodeName\", \"Object\"\n" +
  "```\n";})()
